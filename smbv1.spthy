// Tamarin file for modeling SMBv1
theory SMBv1
begin

// builtins?
// signing:
// This theory models a signature scheme. 
// It defines the function symbols sign/2, verify/3, pk/1, and true, which are related by the equation verify(sign(m,sk),m,pk(sk)) = true.
// revealing-signing:
// This theory models a message-revealing signature scheme. It defines the function symbols revealSign/2, revealVerify/3, getMessage/1, pk/1, and true, which are related by the equations revealVerify(revealSign(m,sk),m,pk(sk)) = true and getMessage(revealSign(m,sk)) = m.
builtins: signing, revealing-signing

// TCP connection
// Alice -> Bob: sync
// Bob -> Alice: sync-acknowledgement
// Alice -> Bob: acknowledgement

rule SYN:
  []
  --[ Begin() ]->
  [ St_AliceWait(), Out('SYN') ]

rule SYNACK:
  [ In('SYN') ]
  -->
  [ St_BobWait(), Out('SYNACK') ]

rule ACK:
  [ St_AliceWait(), In('SYNACK') ]
  -->
  [ Out('ACK') ]

rule FIN:
  [ St_BobWait(), In('ACK') ]
  --[ End() ]->
  []

lemma Works:
  exists-trace
  "Ex #t1 #t2. Begin() @ #t1 & End() @ #t2"

lemma BulletProof:
  all-traces
  "All #t1. Begin() @ #t1 ==> Ex #t2. End() @ #t2 & #t1 < #t2"


// rule Signed
rule SignMessage:
  let 
    signature = sign(m, sk)
  in
  [!Ltk($A, sk), !Pk($A, pk(sk)), Send(m)]
  --[Sign($A, m, signature)]
  ->
  [Store(signature), Verify(signature, m, pk(sk))]

// rule Unsigned
rule RevealSignMessage:
  let
    revealedSig = revealSign(m, sk)
  in
  [!Ltk($A, sk), !Pk($A, pk(sk)), Send(m)]
  --[RevealSign($A, m, revealedSig)]
  ->
  [Store(revealedSig), RevealVerify(revealedSig, m, pk(sk))]


// lemma that 



end